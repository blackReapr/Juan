@model IEnumerable<WishlistVM>
<!-- breadcrumb area start -->
<div class="breadcrumb-area bg-img">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <div class="breadcrumb-wrap text-center">
                    <nav aria-label="breadcrumb">
                        <h1 class="breadcrumb-title">Wishlist</h1>
                        <ul class="breadcrumb">
                            <li class="breadcrumb-item"><a asp-controller="home" asp-action="index">Home</a></li>
                            <li class="breadcrumb-item active" aria-current="page">Wishlist</li>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- breadcrumb area end -->
<!-- wishlist main wrapper start -->
<div class="wishlist-main-wrapper section-padding">
    <div class="container custom-container">
        <!-- Wishlist Page Content Start -->
        <div class="row">
            <div class="col-lg-12">
                <!-- Wishlist Table Area -->
                @if (Model.Count() > 0)
                {
                    <div class="cart-table table-responsive">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th class="pro-thumbnail">Thumbnail</th>
                                    <th class="pro-title">Product</th>
                                    <th class="pro-price">Price</th>
                                    <th class="pro-quantity">Stock Status</th>
                                    <th class="pro-subtotal">Add to Cart</th>
                                    <th class="pro-remove">Remove</th>
                                </tr>
                            </thead>
                            <tbody id="wishlistContainer">
                                @await Html.PartialAsync("_WishlistPartial", Model)
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <h3 class="text-center">No products in your wishlist.</h3>
                }
            </div>
        </div>
        <!-- Wishlist Page Content End -->
    </div>
</div>
<!-- wishlist main wrapper end -->


<script>
    const removeBtns = document.querySelectorAll(".removeBtn");
    removeBtns.forEach(btn => {
        btn.addEventListener("click", e => {
            e.preventDefault();
            axios.delete(btn.getAttribute("href")).then(res => {
                document.querySelector("#wishlistContainer").innerHTML = res.data;
                toastr.options = {
                    'closeButton': true,
                    'debug': false,
                    'newestOnTop': false,
                    'progressBar': false,
                    'positionClass': 'toast-top-right',
                    'preventDuplicates': false,
                    'showDuration': '1000',
                    'hideDuration': '1000',
                    'timeOut': '5000',
                    'extendedTimeOut': '1000',
                    'showEasing': 'swing',
                    'hideEasing': 'linear',
                    'showMethod': 'fadeIn',
                    'hideMethod': 'fadeOut',
                }
                toastr.success("Product removed from your wishlist!");
            });
        });
    });
</script>

<script>
    const btns = document.querySelectorAll(".addToCart");
    const notification = document.querySelector(".notification");
    btns.forEach(btn => {
        btn.addEventListener("click", e => {
            e.preventDefault();
            axios.get(btn.getAttribute("href")).then(res => {
                document.querySelector("#cart").innerHTML = res.data;
                notification.innerHTML = document.querySelectorAll(".minicart-item").length;
                toastr.options = {
                    'closeButton': true,
                    'debug': false,
                    'newestOnTop': false,
                    'progressBar': false,
                    'positionClass': 'toast-top-right',
                    'preventDuplicates': false,
                    'showDuration': '1000',
                    'hideDuration': '1000',
                    'timeOut': '5000',
                    'extendedTimeOut': '1000',
                    'showEasing': 'swing',
                    'hideEasing': 'linear',
                    'showMethod': 'fadeIn',
                    'hideMethod': 'fadeOut',
                }
                toastr.success("Product added to your cart!");
                axios.delete("/wishlist/removeproduct/" + btn.getAttribute("href").split("/")[btn.getAttribute("href").split("/").length - 1]).then(deleteRes => {
                    document.querySelector("#wishlistContainer").innerHTML = deleteRes.data;
                });
            });
        });
    });
</script>